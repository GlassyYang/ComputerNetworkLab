#! /usr/bin/env python
# -*- coding:utf-8 -*-

"""这个文件是一个库，用来实现网页文件的cache，cache是指将服务端的网页缓存在本地，当浏览器试图访问该网页时，
如果网页没有过期，代理服务器则直接返回该网页。具体的实现方法为：
当从浏览器接收文件时，代理服务器缓存该文件，缓存方法为：将文件的url地址使用MD5散列作为缓存文件的文件名，保存在
cache文件夹中；
当浏览器请求一个文件时，代理服务器通过MD5计算文件URL的MD5散列值，然后试图以只读的方式打开该文件；如果打开不了该文件，
则说明该网页没有缓存；否则获取该文件的最后一次修改的日期，然后向浏览器发送if-modified-since头部，如果浏览器返回304，
说明该文件之后没有被修改，代理服务器则直接返回缓存的数据；如果返回200，则代理服务器向浏览器返回服务器返回的数据并更新
该文件的缓存。"""
from os.path import exists
from os import makedirs
from hashlib import md5


class CacheManager(object):
    def __init__(self):
        # 定义缓存文件存储的路径
        self.__route = './cache/'
        self.__buf_size = 40
        self.__separator = b"\r\n.\r\n"
        self.__sep_len = 5
        if not exists(self.__route):
            makedirs(self.__route)
        return

    @staticmethod
    def ana_filename(data):
        """通过浏览器发送的request请求得到文件名，当成功得到文件名之后，函数返回文件名，否则返回None。"""
        index = data.find(b'Host: ')
        if index == -1:
            return None
        host = []
        index += 6
        while index < len(data) and data[index] != ord(b'\r'):
            host.append(chr(data[index]))
            index += 1
        if index == len(data):
            return None
        url = []
        index = -1
        for i in range(len(data)):
            if data[i] == ord(b' '):
                index = i + 1
                break
        if index == -1:
            return None
        while index < len(data) and data[index] != ord(b' '):
            url.append(chr(data[index]))
            index += 1
        if index == len(data):
            return None
        url = ''.join(url).encode('ascii')
        host = ''.join(host).encode('ascii')
        index = url.find(b'http://')
        if index != -1:
            url = url[7:]
        print(url)
        print(host)
        if url.find(host) == -1:
            url += host
        print(url)
        md = md5()
        md.update(url)
        return md.hexdigest()

    def cached(self, filename):
        """
        check whether specified filename is cached. if not, return false, else return true
        :param filename: which will be checked, should be generated by method ana_filename()
        :return: True if exists, or False
        """
        if exists(self.__route + filename):
            return True
        else:
            return False

    def get_data(self, filename):
        """
        Get data from specified filename. filename must exist and generated by method ana_filename()
        :param filename: an existed filename generated by ana_filename()
        :return: data from filename
        """
        f = open(filename, 'rb')
        data = f.read()
        index = data.find(self.__separator)
        assert index != -1
        f.close()
        return data[index:]

    def cache(self, data, filename):
        index = data.find(b'Date: ')
        assert index != -1
        index += 6
        index_e = index
        while data[index_e] != ord('\r'):
            index_e += 1
        print(data[index:index_e])
        with open(self.__route + filename, 'wb') as f:
            f.write(data[index:index_e])
            f.write(self.__separator)
            f.write(data)

    def timestamp(self, filename):
        assert exists(self.__route + filename)
        f = open(self.__route + filename, 'rb')
        data = f.read(self.__buf_size)
        index = data.find(b'\r\n')
        assert index != 0
        return data[:index]
