#! /usr/bin/env python
# -*- coding:utf-8 -*-

"""这个文件是一个库，用来实现网页文件的cache，cache是指将服务端的网页缓存在本地，当浏览器试图访问该网页时，
如果网页没有过期，代理服务器则直接返回该网页。具体的实现方法为：
当从浏览器接收文件时，代理服务器缓存该文件，缓存方法为：将文件的url地址使用MD5散列作为缓存文件的文件名，保存在
cache文件夹中；
当浏览器请求一个文件时，代理服务器通过MD5计算文件URL的MD5散列值，然后试图以只读的方式打开该文件；如果打开不了该文件，
则说明该网页没有缓存；否则获取该文件的最后一次修改的日期，然后向浏览器发送if-modified-since头部，如果浏览器返回304，
说明该文件之后没有被修改，代理服务器则直接返回缓存的数据；如果返回200，则代理服务器向浏览器返回服务器返回的数据并更新
该文件的缓存。"""
from os.path import exists, getmtime
from hashlib import md5
from time import localtime, strftime


class CacheManager(object):
    def __init__(self):
        # 定义缓存文件存储的路径
        self.__route = './cache/'
        self.__time_format = '%a, %d %b %Y %H:%M:%S GMT'
        pass

    def ana_filename(self, data):
        """通过浏览器发送的request请求得到文件名，当成功得到文件名之后，函数返回文件名，否则返回None。"""
        begin_index = data.find(b'host: ')
        if begin_index == -1:
            return None
        url = []
        begin_index += 6
        while begin_index < len(data) and data[begin_index] != ord(b'\r'):
            url.append(chr(data[begin_index]))
        if begin_index == len(data):
            return None
        begin_index = -1
        for i in range(len(data)):
            if data[i] == ord(b' '):
                begin_index = i
                break
        if begin_index == -1:
            return None
        while begin_index < len(data) and data[begin_index] != ord(b' '):
            url.append(chr(data[begin_index]))
        if begin_index == len(data):
            return None
        url = bytes(''.join(url))
        return md5().update(url).hexdigest()

    def cached(self, filename):
        """
        check whether specified filename is cached. if not, return false, else return true
        :param filename: which will be checked, should be generated by method ana_filename()
        :return: True if exists, or False
        """
        assert filename is not None
        if exists(self.__route + filename):
            return True
        else:
            return False

    def get_data(self, filename):
        """
        Get data from specified filename. filename must exist and generated by method ana_filename()
        :param filename: an existed filename generated by ana_filename()
        :return: data from filename
        """
        try:
            f = open(filename, 'r')
            return filename.read()
        finally:
            if f is not None:
                f.close()

    def cache(self, data, filename):
        """将数据缓存起来。data为要缓存的数据，在调用该函数之前必须先调用ana_filename函数"""
        with open(self.__route + filename) as f:
            f.write(data)

    def time_tormat(self, filename):
        assert exists(filename)
        return strftime(self.__time_format, localtime(getmtime(filename)))
